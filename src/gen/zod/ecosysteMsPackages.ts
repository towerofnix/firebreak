/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * Ecosyste.ms: Packages
 * An open API service providing package, version and dependency metadata of many open source software ecosystems and registries.
 * OpenAPI spec version: 1.0.1
 */
import {
  z as zod
} from 'zod'


/**
 * @summary lookup a package by repository URL, purl or ecosystem and name
 */
export const lookupPackageQueryParams = zod.object({
  "repository_url": zod.string().optional(),
  "purl": zod.string().optional(),
  "ecosystem": zod.string().optional(),
  "name": zod.string().optional(),
  "sort": zod.string().optional(),
  "order": zod.string().optional()
})

export const lookupPackageResponseItem = zod.object({
  "id": zod.number(),
  "name": zod.string(),
  "ecosystem": zod.string(),
  "description": zod.string().nullable(),
  "homepage": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "normalized_licenses": zod.array(zod.string()),
  "repository_url": zod.string().nullable(),
  "keywords_array": zod.array(zod.string()),
  "namespace": zod.string().nullable(),
  "versions_count": zod.number(),
  "first_release_published_at": zod.string().datetime().nullable(),
  "latest_release_published_at": zod.string().datetime().nullable(),
  "latest_release_number": zod.string().nullable(),
  "last_synced_at": zod.string().datetime().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "repo_metadata": zod.object({

}).nullable(),
  "repo_metadata_updated_at": zod.string().datetime().nullable(),
  "dependent_packages_count": zod.number(),
  "downloads": zod.number().nullable(),
  "downloads_period": zod.string().nullable(),
  "dependent_repos_count": zod.number(),
  "rankings": zod.object({

}),
  "purl": zod.string(),
  "advisories": zod.array(zod.object({
  "uuid": zod.string(),
  "url": zod.string().nullable(),
  "title": zod.string().nullable(),
  "description": zod.string().nullable(),
  "origin": zod.string().nullable(),
  "severity": zod.string().nullable(),
  "published_at": zod.string().nullable(),
  "withdrawn_at": zod.string().nullable(),
  "classification": zod.string().nullable(),
  "cvss_score": zod.number().nullable(),
  "cvss_vector": zod.string().nullable(),
  "references": zod.array(zod.string().nullable()),
  "source_kind": zod.string().nullable(),
  "identifiers": zod.array(zod.string().nullable()),
  "packages": zod.array(zod.object({

})),
  "created_at": zod.string(),
  "updated_at": zod.string()
})),
  "versions_url": zod.string(),
  "version_numbers_url": zod.string().optional(),
  "dependent_packages_url": zod.string(),
  "related_packages_url": zod.string(),
  "docker_usage_url": zod.string(),
  "docker_dependents_count": zod.number().nullable(),
  "docker_downloads_count": zod.number().nullable(),
  "usage_url": zod.string(),
  "dependent_repositories_url": zod.string(),
  "status": zod.string().nullable(),
  "funding_links": zod.array(zod.string()),
  "maintainers": zod.array(zod.object({
  "uuid": zod.string(),
  "login": zod.string().nullable(),
  "name": zod.string().nullable(),
  "email": zod.string().nullable(),
  "url": zod.string().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "total_downloads": zod.number().nullish(),
  "html_url": zod.string().nullable(),
  "role": zod.string().nullable()
}))
}).and(zod.object({
  "registry": zod.object({
  "name": zod.string(),
  "url": zod.string(),
  "ecosystem": zod.string(),
  "default": zod.boolean(),
  "packages_count": zod.number(),
  "versions_count": zod.number().optional(),
  "maintainers_count": zod.number(),
  "namespaces_count": zod.number(),
  "keywords_count": zod.number(),
  "downloads": zod.number(),
  "github": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_url": zod.string(),
  "maintainers_url": zod.string(),
  "icon_url": zod.string(),
  "purl_type": zod.string()
})
}))
export const lookupPackageResponse = zod.array(lookupPackageResponseItem)


/**
 * @summary list keywords
 */
export const getKeywordsQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional()
})

export const getKeywordsResponseItem = zod.object({
  "name": zod.string(),
  "packages_count": zod.number(),
  "packages_url": zod.string()
})
export const getKeywordsResponse = zod.array(getKeywordsResponseItem)


/**
 * @summary get a keyword by name
 */
export const getKeywordParams = zod.object({
  "keywordName": zod.string()
})

export const getKeywordQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional()
})

export const getKeywordResponse = zod.object({
  "name": zod.string(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "related_keywords": zod.array(zod.object({
  "name": zod.string(),
  "packages_count": zod.number(),
  "packages_url": zod.string()
})),
  "packages": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string(),
  "ecosystem": zod.string(),
  "description": zod.string().nullable(),
  "homepage": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "normalized_licenses": zod.array(zod.string()),
  "repository_url": zod.string().nullable(),
  "keywords_array": zod.array(zod.string()),
  "namespace": zod.string().nullable(),
  "versions_count": zod.number(),
  "first_release_published_at": zod.string().datetime().nullable(),
  "latest_release_published_at": zod.string().datetime().nullable(),
  "latest_release_number": zod.string().nullable(),
  "last_synced_at": zod.string().datetime().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "repo_metadata": zod.object({

}).nullable(),
  "repo_metadata_updated_at": zod.string().datetime().nullable(),
  "dependent_packages_count": zod.number(),
  "downloads": zod.number().nullable(),
  "downloads_period": zod.string().nullable(),
  "dependent_repos_count": zod.number(),
  "rankings": zod.object({

}),
  "purl": zod.string(),
  "advisories": zod.array(zod.object({
  "uuid": zod.string(),
  "url": zod.string().nullable(),
  "title": zod.string().nullable(),
  "description": zod.string().nullable(),
  "origin": zod.string().nullable(),
  "severity": zod.string().nullable(),
  "published_at": zod.string().nullable(),
  "withdrawn_at": zod.string().nullable(),
  "classification": zod.string().nullable(),
  "cvss_score": zod.number().nullable(),
  "cvss_vector": zod.string().nullable(),
  "references": zod.array(zod.string().nullable()),
  "source_kind": zod.string().nullable(),
  "identifiers": zod.array(zod.string().nullable()),
  "packages": zod.array(zod.object({

})),
  "created_at": zod.string(),
  "updated_at": zod.string()
})),
  "versions_url": zod.string(),
  "version_numbers_url": zod.string().optional(),
  "dependent_packages_url": zod.string(),
  "related_packages_url": zod.string(),
  "docker_usage_url": zod.string(),
  "docker_dependents_count": zod.number().nullable(),
  "docker_downloads_count": zod.number().nullable(),
  "usage_url": zod.string(),
  "dependent_repositories_url": zod.string(),
  "status": zod.string().nullable(),
  "funding_links": zod.array(zod.string()),
  "maintainers": zod.array(zod.object({
  "uuid": zod.string(),
  "login": zod.string().nullable(),
  "name": zod.string().nullable(),
  "email": zod.string().nullable(),
  "url": zod.string().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "total_downloads": zod.number().nullish(),
  "html_url": zod.string().nullable(),
  "role": zod.string().nullable()
}))
}))
})


/**
 * @summary list registies
 */
export const getRegistriesQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional()
})

export const getRegistriesResponseItem = zod.object({
  "name": zod.string(),
  "url": zod.string(),
  "ecosystem": zod.string(),
  "default": zod.boolean(),
  "packages_count": zod.number(),
  "versions_count": zod.number().optional(),
  "maintainers_count": zod.number(),
  "namespaces_count": zod.number(),
  "keywords_count": zod.number(),
  "downloads": zod.number(),
  "github": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_url": zod.string(),
  "maintainers_url": zod.string(),
  "icon_url": zod.string(),
  "purl_type": zod.string()
})
export const getRegistriesResponse = zod.array(getRegistriesResponseItem)


/**
 * @summary get a registry by name
 */
export const getRegistryParams = zod.object({
  "registryName": zod.string()
})

export const getRegistryQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional()
})

export const getRegistryResponse = zod.object({
  "name": zod.string(),
  "url": zod.string(),
  "ecosystem": zod.string(),
  "default": zod.boolean(),
  "packages_count": zod.number(),
  "versions_count": zod.number().optional(),
  "maintainers_count": zod.number(),
  "namespaces_count": zod.number(),
  "keywords_count": zod.number(),
  "downloads": zod.number(),
  "github": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_url": zod.string(),
  "maintainers_url": zod.string(),
  "icon_url": zod.string(),
  "purl_type": zod.string()
})


/**
 * @summary get a list of maintainers from a registry
 */
export const getRegistryMaintainersParams = zod.object({
  "registryName": zod.string()
})

export const getRegistryMaintainersQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional(),
  "created_after": zod.string().datetime().optional(),
  "updated_after": zod.string().datetime().optional(),
  "sort": zod.string().optional(),
  "order": zod.string().optional()
})

export const getRegistryMaintainersResponseItem = zod.object({
  "uuid": zod.string(),
  "login": zod.string().nullable(),
  "name": zod.string().nullable(),
  "email": zod.string().nullable(),
  "url": zod.string().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "total_downloads": zod.number().nullish(),
  "html_url": zod.string().nullable(),
  "role": zod.string().nullable()
})
export const getRegistryMaintainersResponse = zod.array(getRegistryMaintainersResponseItem)


/**
 * @summary get a maintainer by login or UUID
 */
export const getRegistryMaintainerParams = zod.object({
  "registryName": zod.string(),
  "MaintainerLoginOrUUID": zod.string()
})

export const getRegistryMaintainerResponse = zod.object({
  "uuid": zod.string(),
  "login": zod.string().nullable(),
  "name": zod.string().nullable(),
  "email": zod.string().nullable(),
  "url": zod.string().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "total_downloads": zod.number().nullish(),
  "html_url": zod.string().nullable(),
  "role": zod.string().nullable()
})


/**
 * @summary get packages for a maintainer by login or UUID
 */
export const getRegistryMaintainerPackagesParams = zod.object({
  "registryName": zod.string(),
  "MaintainerLoginOrUUID": zod.string()
})

export const getRegistryMaintainerPackagesQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional()
})

export const getRegistryMaintainerPackagesResponseItem = zod.object({
  "id": zod.number(),
  "name": zod.string(),
  "ecosystem": zod.string(),
  "description": zod.string().nullable(),
  "homepage": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "normalized_licenses": zod.array(zod.string()),
  "repository_url": zod.string().nullable(),
  "keywords_array": zod.array(zod.string()),
  "namespace": zod.string().nullable(),
  "versions_count": zod.number(),
  "first_release_published_at": zod.string().datetime().nullable(),
  "latest_release_published_at": zod.string().datetime().nullable(),
  "latest_release_number": zod.string().nullable(),
  "last_synced_at": zod.string().datetime().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "repo_metadata": zod.object({

}).nullable(),
  "repo_metadata_updated_at": zod.string().datetime().nullable(),
  "dependent_packages_count": zod.number(),
  "downloads": zod.number().nullable(),
  "downloads_period": zod.string().nullable(),
  "dependent_repos_count": zod.number(),
  "rankings": zod.object({

}),
  "purl": zod.string(),
  "advisories": zod.array(zod.object({
  "uuid": zod.string(),
  "url": zod.string().nullable(),
  "title": zod.string().nullable(),
  "description": zod.string().nullable(),
  "origin": zod.string().nullable(),
  "severity": zod.string().nullable(),
  "published_at": zod.string().nullable(),
  "withdrawn_at": zod.string().nullable(),
  "classification": zod.string().nullable(),
  "cvss_score": zod.number().nullable(),
  "cvss_vector": zod.string().nullable(),
  "references": zod.array(zod.string().nullable()),
  "source_kind": zod.string().nullable(),
  "identifiers": zod.array(zod.string().nullable()),
  "packages": zod.array(zod.object({

})),
  "created_at": zod.string(),
  "updated_at": zod.string()
})),
  "versions_url": zod.string(),
  "version_numbers_url": zod.string().optional(),
  "dependent_packages_url": zod.string(),
  "related_packages_url": zod.string(),
  "docker_usage_url": zod.string(),
  "docker_dependents_count": zod.number().nullable(),
  "docker_downloads_count": zod.number().nullable(),
  "usage_url": zod.string(),
  "dependent_repositories_url": zod.string(),
  "status": zod.string().nullable(),
  "funding_links": zod.array(zod.string()),
  "maintainers": zod.array(zod.object({
  "uuid": zod.string(),
  "login": zod.string().nullable(),
  "name": zod.string().nullable(),
  "email": zod.string().nullable(),
  "url": zod.string().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "total_downloads": zod.number().nullish(),
  "html_url": zod.string().nullable(),
  "role": zod.string().nullable()
}))
})
export const getRegistryMaintainerPackagesResponse = zod.array(getRegistryMaintainerPackagesResponseItem)


/**
 * @summary get a list of namespaces from a registry
 */
export const getRegistryNamespacesParams = zod.object({
  "registryName": zod.string()
})

export const getRegistryNamespacesQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional()
})

export const getRegistryNamespacesResponseItem = zod.object({
  "name": zod.string(),
  "packages_count": zod.number(),
  "packages_url": zod.string()
})
export const getRegistryNamespacesResponse = zod.array(getRegistryNamespacesResponseItem)


/**
 * @summary get a namespace by name
 */
export const getRegistryNamespaceParams = zod.object({
  "registryName": zod.string(),
  "namespaceName": zod.string()
})

export const getRegistryNamespaceResponse = zod.object({
  "name": zod.string(),
  "packages_count": zod.number(),
  "packages_url": zod.string()
})


/**
 * @summary get packages for a namespace by login or UUID
 */
export const getRegistryNamespacePackagesParams = zod.object({
  "registryName": zod.string(),
  "namespaceName": zod.string()
})

export const getRegistryNamespacePackagesQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional()
})

export const getRegistryNamespacePackagesResponseItem = zod.object({
  "id": zod.number(),
  "name": zod.string(),
  "ecosystem": zod.string(),
  "description": zod.string().nullable(),
  "homepage": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "normalized_licenses": zod.array(zod.string()),
  "repository_url": zod.string().nullable(),
  "keywords_array": zod.array(zod.string()),
  "namespace": zod.string().nullable(),
  "versions_count": zod.number(),
  "first_release_published_at": zod.string().datetime().nullable(),
  "latest_release_published_at": zod.string().datetime().nullable(),
  "latest_release_number": zod.string().nullable(),
  "last_synced_at": zod.string().datetime().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "repo_metadata": zod.object({

}).nullable(),
  "repo_metadata_updated_at": zod.string().datetime().nullable(),
  "dependent_packages_count": zod.number(),
  "downloads": zod.number().nullable(),
  "downloads_period": zod.string().nullable(),
  "dependent_repos_count": zod.number(),
  "rankings": zod.object({

}),
  "purl": zod.string(),
  "advisories": zod.array(zod.object({
  "uuid": zod.string(),
  "url": zod.string().nullable(),
  "title": zod.string().nullable(),
  "description": zod.string().nullable(),
  "origin": zod.string().nullable(),
  "severity": zod.string().nullable(),
  "published_at": zod.string().nullable(),
  "withdrawn_at": zod.string().nullable(),
  "classification": zod.string().nullable(),
  "cvss_score": zod.number().nullable(),
  "cvss_vector": zod.string().nullable(),
  "references": zod.array(zod.string().nullable()),
  "source_kind": zod.string().nullable(),
  "identifiers": zod.array(zod.string().nullable()),
  "packages": zod.array(zod.object({

})),
  "created_at": zod.string(),
  "updated_at": zod.string()
})),
  "versions_url": zod.string(),
  "version_numbers_url": zod.string().optional(),
  "dependent_packages_url": zod.string(),
  "related_packages_url": zod.string(),
  "docker_usage_url": zod.string(),
  "docker_dependents_count": zod.number().nullable(),
  "docker_downloads_count": zod.number().nullable(),
  "usage_url": zod.string(),
  "dependent_repositories_url": zod.string(),
  "status": zod.string().nullable(),
  "funding_links": zod.array(zod.string()),
  "maintainers": zod.array(zod.object({
  "uuid": zod.string(),
  "login": zod.string().nullable(),
  "name": zod.string().nullable(),
  "email": zod.string().nullable(),
  "url": zod.string().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "total_downloads": zod.number().nullish(),
  "html_url": zod.string().nullable(),
  "role": zod.string().nullable()
}))
})
export const getRegistryNamespacePackagesResponse = zod.array(getRegistryNamespacePackagesResponseItem)


/**
 * @summary get a list of packages from a registry
 */
export const getRegistryPackagesParams = zod.object({
  "registryName": zod.string()
})

export const getRegistryPackagesQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional(),
  "created_after": zod.string().datetime().optional(),
  "updated_after": zod.string().datetime().optional(),
  "created_before": zod.string().datetime().optional(),
  "updated_before": zod.string().datetime().optional(),
  "sort": zod.string().optional(),
  "order": zod.string().optional()
})

export const getRegistryPackagesResponseItem = zod.object({
  "id": zod.number(),
  "name": zod.string(),
  "ecosystem": zod.string(),
  "description": zod.string().nullable(),
  "homepage": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "normalized_licenses": zod.array(zod.string()),
  "repository_url": zod.string().nullable(),
  "keywords_array": zod.array(zod.string()),
  "namespace": zod.string().nullable(),
  "versions_count": zod.number(),
  "first_release_published_at": zod.string().datetime().nullable(),
  "latest_release_published_at": zod.string().datetime().nullable(),
  "latest_release_number": zod.string().nullable(),
  "last_synced_at": zod.string().datetime().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "repo_metadata": zod.object({

}).nullable(),
  "repo_metadata_updated_at": zod.string().datetime().nullable(),
  "dependent_packages_count": zod.number(),
  "downloads": zod.number().nullable(),
  "downloads_period": zod.string().nullable(),
  "dependent_repos_count": zod.number(),
  "rankings": zod.object({

}),
  "purl": zod.string(),
  "advisories": zod.array(zod.object({
  "uuid": zod.string(),
  "url": zod.string().nullable(),
  "title": zod.string().nullable(),
  "description": zod.string().nullable(),
  "origin": zod.string().nullable(),
  "severity": zod.string().nullable(),
  "published_at": zod.string().nullable(),
  "withdrawn_at": zod.string().nullable(),
  "classification": zod.string().nullable(),
  "cvss_score": zod.number().nullable(),
  "cvss_vector": zod.string().nullable(),
  "references": zod.array(zod.string().nullable()),
  "source_kind": zod.string().nullable(),
  "identifiers": zod.array(zod.string().nullable()),
  "packages": zod.array(zod.object({

})),
  "created_at": zod.string(),
  "updated_at": zod.string()
})),
  "versions_url": zod.string(),
  "version_numbers_url": zod.string().optional(),
  "dependent_packages_url": zod.string(),
  "related_packages_url": zod.string(),
  "docker_usage_url": zod.string(),
  "docker_dependents_count": zod.number().nullable(),
  "docker_downloads_count": zod.number().nullable(),
  "usage_url": zod.string(),
  "dependent_repositories_url": zod.string(),
  "status": zod.string().nullable(),
  "funding_links": zod.array(zod.string()),
  "maintainers": zod.array(zod.object({
  "uuid": zod.string(),
  "login": zod.string().nullable(),
  "name": zod.string().nullable(),
  "email": zod.string().nullable(),
  "url": zod.string().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "total_downloads": zod.number().nullish(),
  "html_url": zod.string().nullable(),
  "role": zod.string().nullable()
}))
})
export const getRegistryPackagesResponse = zod.array(getRegistryPackagesResponseItem)


/**
 * @summary get a list of package names from a registry
 */
export const getRegistryPackageNamesParams = zod.object({
  "registryName": zod.string()
})

export const getRegistryPackageNamesQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional(),
  "created_after": zod.string().datetime().optional(),
  "updated_after": zod.string().datetime().optional(),
  "created_before": zod.string().datetime().optional(),
  "updated_before": zod.string().datetime().optional(),
  "sort": zod.string().optional(),
  "order": zod.string().optional()
})

export const getRegistryPackageNamesResponseItem = zod.string()
export const getRegistryPackageNamesResponse = zod.array(getRegistryPackageNamesResponseItem)


/**
 * @summary get a list of recently published versions from a registry
 */
export const getRegistryRecentVersionsParams = zod.object({
  "registryName": zod.string()
})

export const getRegistryRecentVersionsQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional(),
  "created_after": zod.string().datetime().optional(),
  "updated_after": zod.string().datetime().optional(),
  "published_after": zod.string().datetime().optional(),
  "published_before": zod.string().datetime().optional(),
  "created_before": zod.string().datetime().optional(),
  "updated_before": zod.string().datetime().optional(),
  "sort": zod.string().optional(),
  "order": zod.string().optional()
})

export const getRegistryRecentVersionsResponseItem = zod.object({
  "id": zod.number(),
  "number": zod.string(),
  "published_at": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "integrity": zod.string().nullable(),
  "status": zod.string().nullable(),
  "download_url": zod.string().nullable(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "purl": zod.string(),
  "latest": zod.boolean(),
  "version_url": zod.string(),
  "package": zod.object({
  "id": zod.number(),
  "name": zod.string(),
  "ecosystem": zod.string(),
  "description": zod.string().nullable(),
  "homepage": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "normalized_licenses": zod.array(zod.string()),
  "repository_url": zod.string().nullable(),
  "keywords_array": zod.array(zod.string()),
  "namespace": zod.string().nullable(),
  "versions_count": zod.number(),
  "first_release_published_at": zod.string().datetime().nullable(),
  "latest_release_published_at": zod.string().datetime().nullable(),
  "latest_release_number": zod.string().nullable(),
  "last_synced_at": zod.string().datetime().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "repo_metadata": zod.object({

}).nullable(),
  "repo_metadata_updated_at": zod.string().datetime().nullable(),
  "dependent_packages_count": zod.number(),
  "downloads": zod.number().nullable(),
  "downloads_period": zod.string().nullable(),
  "dependent_repos_count": zod.number(),
  "rankings": zod.object({

}),
  "purl": zod.string(),
  "advisories": zod.array(zod.object({
  "uuid": zod.string(),
  "url": zod.string().nullable(),
  "title": zod.string().nullable(),
  "description": zod.string().nullable(),
  "origin": zod.string().nullable(),
  "severity": zod.string().nullable(),
  "published_at": zod.string().nullable(),
  "withdrawn_at": zod.string().nullable(),
  "classification": zod.string().nullable(),
  "cvss_score": zod.number().nullable(),
  "cvss_vector": zod.string().nullable(),
  "references": zod.array(zod.string().nullable()),
  "source_kind": zod.string().nullable(),
  "identifiers": zod.array(zod.string().nullable()),
  "packages": zod.array(zod.object({

})),
  "created_at": zod.string(),
  "updated_at": zod.string()
})),
  "versions_url": zod.string(),
  "version_numbers_url": zod.string().optional(),
  "dependent_packages_url": zod.string(),
  "related_packages_url": zod.string(),
  "docker_usage_url": zod.string(),
  "docker_dependents_count": zod.number().nullable(),
  "docker_downloads_count": zod.number().nullable(),
  "usage_url": zod.string(),
  "dependent_repositories_url": zod.string(),
  "status": zod.string().nullable(),
  "funding_links": zod.array(zod.string()),
  "maintainers": zod.array(zod.object({
  "uuid": zod.string(),
  "login": zod.string().nullable(),
  "name": zod.string().nullable(),
  "email": zod.string().nullable(),
  "url": zod.string().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "total_downloads": zod.number().nullish(),
  "html_url": zod.string().nullable(),
  "role": zod.string().nullable()
}))
})
})
export const getRegistryRecentVersionsResponse = zod.array(getRegistryRecentVersionsResponseItem)


/**
 * @summary get a package by name
 */
export const getRegistryPackageParams = zod.object({
  "registryName": zod.string(),
  "packageName": zod.string()
})

export const getRegistryPackageResponse = zod.object({
  "id": zod.number(),
  "name": zod.string(),
  "ecosystem": zod.string(),
  "description": zod.string().nullable(),
  "homepage": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "normalized_licenses": zod.array(zod.string()),
  "repository_url": zod.string().nullable(),
  "keywords_array": zod.array(zod.string()),
  "namespace": zod.string().nullable(),
  "versions_count": zod.number(),
  "first_release_published_at": zod.string().datetime().nullable(),
  "latest_release_published_at": zod.string().datetime().nullable(),
  "latest_release_number": zod.string().nullable(),
  "last_synced_at": zod.string().datetime().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "repo_metadata": zod.object({

}).nullable(),
  "repo_metadata_updated_at": zod.string().datetime().nullable(),
  "dependent_packages_count": zod.number(),
  "downloads": zod.number().nullable(),
  "downloads_period": zod.string().nullable(),
  "dependent_repos_count": zod.number(),
  "rankings": zod.object({

}),
  "purl": zod.string(),
  "advisories": zod.array(zod.object({
  "uuid": zod.string(),
  "url": zod.string().nullable(),
  "title": zod.string().nullable(),
  "description": zod.string().nullable(),
  "origin": zod.string().nullable(),
  "severity": zod.string().nullable(),
  "published_at": zod.string().nullable(),
  "withdrawn_at": zod.string().nullable(),
  "classification": zod.string().nullable(),
  "cvss_score": zod.number().nullable(),
  "cvss_vector": zod.string().nullable(),
  "references": zod.array(zod.string().nullable()),
  "source_kind": zod.string().nullable(),
  "identifiers": zod.array(zod.string().nullable()),
  "packages": zod.array(zod.object({

})),
  "created_at": zod.string(),
  "updated_at": zod.string()
})),
  "versions_url": zod.string(),
  "version_numbers_url": zod.string().optional(),
  "dependent_packages_url": zod.string(),
  "related_packages_url": zod.string(),
  "docker_usage_url": zod.string(),
  "docker_dependents_count": zod.number().nullable(),
  "docker_downloads_count": zod.number().nullable(),
  "usage_url": zod.string(),
  "dependent_repositories_url": zod.string(),
  "status": zod.string().nullable(),
  "funding_links": zod.array(zod.string()),
  "maintainers": zod.array(zod.object({
  "uuid": zod.string(),
  "login": zod.string().nullable(),
  "name": zod.string().nullable(),
  "email": zod.string().nullable(),
  "url": zod.string().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "total_downloads": zod.number().nullish(),
  "html_url": zod.string().nullable(),
  "role": zod.string().nullable()
}))
})


/**
 * @summary get a list of packages that depend on a package
 */
export const getRegistryPackageDependentPackagesParams = zod.object({
  "registryName": zod.string(),
  "packageName": zod.string()
})

export const getRegistryPackageDependentPackagesQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional(),
  "created_after": zod.string().datetime().optional(),
  "updated_after": zod.string().datetime().optional(),
  "sort": zod.string().optional(),
  "order": zod.string().optional(),
  "latest": zod.boolean().optional()
})

export const getRegistryPackageDependentPackagesResponseItem = zod.object({
  "id": zod.number(),
  "name": zod.string(),
  "ecosystem": zod.string(),
  "description": zod.string().nullable(),
  "homepage": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "normalized_licenses": zod.array(zod.string()),
  "repository_url": zod.string().nullable(),
  "keywords_array": zod.array(zod.string()),
  "namespace": zod.string().nullable(),
  "versions_count": zod.number(),
  "first_release_published_at": zod.string().datetime().nullable(),
  "latest_release_published_at": zod.string().datetime().nullable(),
  "latest_release_number": zod.string().nullable(),
  "last_synced_at": zod.string().datetime().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "repo_metadata": zod.object({

}).nullable(),
  "repo_metadata_updated_at": zod.string().datetime().nullable(),
  "dependent_packages_count": zod.number(),
  "downloads": zod.number().nullable(),
  "downloads_period": zod.string().nullable(),
  "dependent_repos_count": zod.number(),
  "rankings": zod.object({

}),
  "purl": zod.string(),
  "advisories": zod.array(zod.object({
  "uuid": zod.string(),
  "url": zod.string().nullable(),
  "title": zod.string().nullable(),
  "description": zod.string().nullable(),
  "origin": zod.string().nullable(),
  "severity": zod.string().nullable(),
  "published_at": zod.string().nullable(),
  "withdrawn_at": zod.string().nullable(),
  "classification": zod.string().nullable(),
  "cvss_score": zod.number().nullable(),
  "cvss_vector": zod.string().nullable(),
  "references": zod.array(zod.string().nullable()),
  "source_kind": zod.string().nullable(),
  "identifiers": zod.array(zod.string().nullable()),
  "packages": zod.array(zod.object({

})),
  "created_at": zod.string(),
  "updated_at": zod.string()
})),
  "versions_url": zod.string(),
  "version_numbers_url": zod.string().optional(),
  "dependent_packages_url": zod.string(),
  "related_packages_url": zod.string(),
  "docker_usage_url": zod.string(),
  "docker_dependents_count": zod.number().nullable(),
  "docker_downloads_count": zod.number().nullable(),
  "usage_url": zod.string(),
  "dependent_repositories_url": zod.string(),
  "status": zod.string().nullable(),
  "funding_links": zod.array(zod.string()),
  "maintainers": zod.array(zod.object({
  "uuid": zod.string(),
  "login": zod.string().nullable(),
  "name": zod.string().nullable(),
  "email": zod.string().nullable(),
  "url": zod.string().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "total_downloads": zod.number().nullish(),
  "html_url": zod.string().nullable(),
  "role": zod.string().nullable()
}))
})
export const getRegistryPackageDependentPackagesResponse = zod.array(getRegistryPackageDependentPackagesResponseItem)


/**
 * @summary get a list of packages that are related to a package
 */
export const getRegistryPackageRelatedPackagesParams = zod.object({
  "registryName": zod.string(),
  "packageName": zod.string()
})

export const getRegistryPackageRelatedPackagesQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional(),
  "created_after": zod.string().datetime().optional(),
  "updated_after": zod.string().datetime().optional(),
  "sort": zod.string().optional(),
  "order": zod.string().optional()
})

export const getRegistryPackageRelatedPackagesResponseItem = zod.object({
  "id": zod.number(),
  "name": zod.string(),
  "ecosystem": zod.string(),
  "description": zod.string().nullable(),
  "homepage": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "normalized_licenses": zod.array(zod.string()),
  "repository_url": zod.string().nullable(),
  "keywords_array": zod.array(zod.string()),
  "namespace": zod.string().nullable(),
  "versions_count": zod.number(),
  "first_release_published_at": zod.string().datetime().nullable(),
  "latest_release_published_at": zod.string().datetime().nullable(),
  "latest_release_number": zod.string().nullable(),
  "last_synced_at": zod.string().datetime().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "repo_metadata": zod.object({

}).nullable(),
  "repo_metadata_updated_at": zod.string().datetime().nullable(),
  "dependent_packages_count": zod.number(),
  "downloads": zod.number().nullable(),
  "downloads_period": zod.string().nullable(),
  "dependent_repos_count": zod.number(),
  "rankings": zod.object({

}),
  "purl": zod.string(),
  "advisories": zod.array(zod.object({
  "uuid": zod.string(),
  "url": zod.string().nullable(),
  "title": zod.string().nullable(),
  "description": zod.string().nullable(),
  "origin": zod.string().nullable(),
  "severity": zod.string().nullable(),
  "published_at": zod.string().nullable(),
  "withdrawn_at": zod.string().nullable(),
  "classification": zod.string().nullable(),
  "cvss_score": zod.number().nullable(),
  "cvss_vector": zod.string().nullable(),
  "references": zod.array(zod.string().nullable()),
  "source_kind": zod.string().nullable(),
  "identifiers": zod.array(zod.string().nullable()),
  "packages": zod.array(zod.object({

})),
  "created_at": zod.string(),
  "updated_at": zod.string()
})),
  "versions_url": zod.string(),
  "version_numbers_url": zod.string().optional(),
  "dependent_packages_url": zod.string(),
  "related_packages_url": zod.string(),
  "docker_usage_url": zod.string(),
  "docker_dependents_count": zod.number().nullable(),
  "docker_downloads_count": zod.number().nullable(),
  "usage_url": zod.string(),
  "dependent_repositories_url": zod.string(),
  "status": zod.string().nullable(),
  "funding_links": zod.array(zod.string()),
  "maintainers": zod.array(zod.object({
  "uuid": zod.string(),
  "login": zod.string().nullable(),
  "name": zod.string().nullable(),
  "email": zod.string().nullable(),
  "url": zod.string().nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "packages_count": zod.number(),
  "packages_url": zod.string(),
  "total_downloads": zod.number().nullish(),
  "html_url": zod.string().nullable(),
  "role": zod.string().nullable()
}))
})
export const getRegistryPackageRelatedPackagesResponse = zod.array(getRegistryPackageRelatedPackagesResponseItem)


/**
 * @summary get a list of version numbers for a package from a registry
 */
export const getRegistryPackageVersionNumbersParams = zod.object({
  "registryName": zod.string(),
  "packageName": zod.string()
})

export const getRegistryPackageVersionNumbersResponseItem = zod.string()
export const getRegistryPackageVersionNumbersResponse = zod.array(getRegistryPackageVersionNumbersResponseItem)


/**
 * @summary get a list of versions for a package
 */
export const getRegistryPackageVersionsParams = zod.object({
  "registryName": zod.string(),
  "packageName": zod.string()
})

export const getRegistryPackageVersionsQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional(),
  "created_after": zod.string().datetime().optional(),
  "updated_after": zod.string().datetime().optional(),
  "published_after": zod.string().datetime().optional(),
  "published_before": zod.string().datetime().optional(),
  "created_before": zod.string().datetime().optional(),
  "updated_before": zod.string().datetime().optional(),
  "sort": zod.string().optional(),
  "order": zod.string().optional()
})

export const getRegistryPackageVersionsResponseItem = zod.object({
  "id": zod.number(),
  "number": zod.string(),
  "published_at": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "integrity": zod.string().nullable(),
  "status": zod.string().nullable(),
  "download_url": zod.string().nullable(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "purl": zod.string(),
  "version_url": zod.string(),
  "related_tag": zod.object({

})
})
export const getRegistryPackageVersionsResponse = zod.array(getRegistryPackageVersionsResponseItem)


/**
 * @summary get a version of a package
 */
export const getRegistryPackageVersionParams = zod.object({
  "registryName": zod.string(),
  "packageName": zod.string(),
  "versionNumber": zod.string()
})

export const getRegistryPackageVersionResponse = zod.object({
  "id": zod.number().optional(),
  "number": zod.string(),
  "published_at": zod.string().nullable(),
  "licenses": zod.string().nullable(),
  "integrity": zod.string().nullable(),
  "status": zod.string().nullable(),
  "download_url": zod.string().nullable(),
  "registry_url": zod.string().nullable(),
  "documentation_url": zod.string().nullable(),
  "install_command": zod.string().nullable(),
  "metadata": zod.object({

}).nullable(),
  "created_at": zod.string().datetime(),
  "updated_at": zod.string().datetime(),
  "purl": zod.string(),
  "version_url": zod.string(),
  "related_tag": zod.object({

}),
  "latest": zod.boolean(),
  "dependencies": zod.array(zod.object({
  "id": zod.number(),
  "ecosystem": zod.string(),
  "package_name": zod.string(),
  "requirements": zod.string().nullable(),
  "kind": zod.string().nullable(),
  "optional": zod.boolean().nullable()
}))
})


/**
 * @summary list dependencies
 */
export const getDependenciesQueryParams = zod.object({
  "page": zod.number().optional(),
  "per_page": zod.number().optional(),
  "ecosystem": zod.string().optional(),
  "package_name": zod.string().optional(),
  "package_id": zod.string().optional(),
  "requirements": zod.string().optional(),
  "kind": zod.string().optional(),
  "optional": zod.boolean().optional(),
  "after": zod.string().optional()
})

export const getDependenciesResponseItem = zod.object({
  "id": zod.number(),
  "ecosystem": zod.string(),
  "package_name": zod.string(),
  "requirements": zod.string().nullable(),
  "kind": zod.string().nullable(),
  "optional": zod.boolean().nullable()
})
export const getDependenciesResponse = zod.array(getDependenciesResponseItem)


